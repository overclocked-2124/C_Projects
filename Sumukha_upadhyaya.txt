//Display the elements of both the primary and secondary diagonals of a square matrix.

#include <stdio.h>

int main() {
    int rCount, cCount;
    scanf("%d%d", &rCount, &cCount);

    if (rCount == cCount) {
        int mat[rCount][cCount];

        for (int row = 0; row < rCount; row++) {
            for (int col = 0; col < cCount; col++) {
                scanf("%d", &mat[row][col]);
            }
        }

        printf("Primary diagonal elements:\n");
        for (int row = 0; row < rCount; row++) {
            for (int col = 0; col < cCount; col++) {
                if (row == col) {
                    printf("%d", mat[row][col]);
                }
            }
            printf("\n");
        }

        printf("Secondary diagonal elements:\n");
        for (int row = 0; row < rCount; row++) {
            for (int col = 0; col < cCount; col++) {
                if (row + col == cCount - 1) {
                    printf("%d", mat[row][col]);
                }
            }
            printf("\n");
        }

    } else {
        printf("Rows not equal to number of columns:");
    }

    return 0;
}



//An identity matrix has 1s on the main diagonal and 0s elsewhere. This program validates that condition.

#include <stdio.h>

int main() {
    int rowCount, colCount, invalidFlag = 0;
    scanf("%d%d", &rowCount, &colCount);
    if (rowCount == colCount) {
        int matrix[rowCount][colCount];
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < colCount; c++) {
                scanf("%d", &matrix[r][c]);
            }
        }
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < colCount; c++) {
                if ((r == c && matrix[r][c] != 1) ||
                    (r != c && matrix[r][c] != 0)) {
                    invalidFlag = 1;
                    break;
                }
            }
            if (invalidFlag) break;
        }
        if (invalidFlag)
            printf("Matrix is not identity matrix\n");
        else
            printf("Given matrix is an identity matrix\n");
    } else {
        printf("Rows not equal to number of columns\n");
    }
    return 0;
}

//Trace is the sum of the primary diagonal elements. This program also calculates the sum of the secondary diagonal elements.

#include <stdio.h>

int main() {
    int rows, cols, sumPrimary = 0, sumSecondary = 0;
    scanf("%d%d", &rows, &cols);
    if (rows == cols) {
        int mat[rows][cols];
        for (int r = 0; r < rows; r++)
            for (int c = 0; c < cols; c++)
                scanf("%d", &mat[r][c]);

        for (int i = 0; i < rows; i++) {
            sumPrimary   += mat[i][i];
            sumSecondary += mat[i][cols - 1 - i];
        }

        printf("Primary diagonal sum: %d\n", sumPrimary);
        printf("Secondary diagonal sum: %d\n", sumSecondary);
    } else {
        printf("Rows not equal to number of columns:");
    }
    return 0;
}

//A matrix is symmetric if it is equal to its transpose. This program verifies that condition.

#include<stdio.h>
int main()
{
    int m,n,flag=0;
    scanf("%d%d",&m,&n);
    if(m==n)
    {
    int a[m][n],b[m][n];
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }

    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(a[i][j]!=b[i][j])
            {
                flag=1;
                break;
            }      
        }
    }
    if(flag==1)
    {
        printf("Matrix is not symmetric");
    }
    else
    {
        printf("Given matrix is symmetric");
    }
}
else
{
    printf("Rows not equal to number of columns:");
}
}


//Traverse the matrix and count elements that are not zero.

#include<stdio.h>
int main()
{
    int m,n;
    scanf("%d%d",&m,&n);
    int a[m][n],count=0;
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
            if(a[i][j]!=0)
            {
                count++;
            }
        }
    }
    printf("Total number of non zero elements are:%d",count);
}

//Accept two matrices of the same dimensions and compute their sum element-wise.

#include<stdio.h>
int main()
{
    int m,n;
    scanf("%d%d",&m,&n);
    if(m==n)
    {
    int a[m][n],b[m][n],c[m][n];
    printf("Enter the first matrix:");
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    printf("Enter second matrix:");
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&b[i][j]);
        }
    }
    printf("Summed matrix is:\n");
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            c[i][j]=a[i][j]+b[i][j];
        }
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d",c[i][j]);
        }
        printf("\n");
    }
    }
    else
    {
        printf("Rows not equal to number of columns:");
    }
}

